// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: role.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addMultiplePermissionsToRole = `-- name: AddMultiplePermissionsToRole :many
INSERT INTO "role_permissions" (
  role_id,
  permission_id
)
SELECT
  $1,
  permission_id
FROM unnest($2::uuid[]) AS permission_id
RETURNING id, role_id, permission_id
`

type AddMultiplePermissionsToRoleParams struct {
	RoleID  uuid.UUID   `json:"role_id"`
	Column2 []uuid.UUID `json:"column_2"`
}

func (q *Queries) AddMultiplePermissionsToRole(ctx context.Context, arg AddMultiplePermissionsToRoleParams) ([]RolePermission, error) {
	rows, err := q.db.QueryContext(ctx, addMultiplePermissionsToRole, arg.RoleID, pq.Array(arg.Column2))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolePermission{}
	for rows.Next() {
		var i RolePermission
		if err := rows.Scan(&i.ID, &i.RoleID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const addRolePermission = `-- name: AddRolePermission :one
INSERT INTO "role_permissions" (
  role_id,
  permission_id
) VALUES (
  $1,
  $2
) RETURNING id, role_id, permission_id
`

type AddRolePermissionParams struct {
	RoleID       uuid.UUID `json:"role_id"`
	PermissionID uuid.UUID `json:"permission_id"`
}

func (q *Queries) AddRolePermission(ctx context.Context, arg AddRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRowContext(ctx, addRolePermission, arg.RoleID, arg.PermissionID)
	var i RolePermission
	err := row.Scan(&i.ID, &i.RoleID, &i.PermissionID)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO "role" (
  name,
  code
) VALUES (
  $1,
  $2
) RETURNING id, name, code
`

type CreateRoleParams struct {
	Name string `json:"name"`
	Code string `json:"code"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Name, arg.Code)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "role" WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const deleteRolePermission = `-- name: DeleteRolePermission :exec
DELETE FROM "role_permissions"
WHERE role_id = $1 AND permission_id = $2
`

type DeleteRolePermissionParams struct {
	RoleID       uuid.UUID `json:"role_id"`
	PermissionID uuid.UUID `json:"permission_id"`
}

func (q *Queries) DeleteRolePermission(ctx context.Context, arg DeleteRolePermissionParams) error {
	_, err := q.db.ExecContext(ctx, deleteRolePermission, arg.RoleID, arg.PermissionID)
	return err
}

const getPermissionIDByName = `-- name: GetPermissionIDByName :one
SELECT id
FROM permissions
WHERE name = $1
`

func (q *Queries) GetPermissionIDByName(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getPermissionIDByName, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, code
FROM role
WHERE id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, code
FROM role
WHERE name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const getRoleID = `-- name: GetRoleID :one
SELECT id FROM "role" WHERE name = $1
`

func (q *Queries) GetRoleID(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getRoleID, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRolePermissionsByPermissionID = `-- name: GetRolePermissionsByPermissionID :many
SELECT id, role_id, permission_id
FROM "role_permissions"
WHERE permission_id = $1
`

func (q *Queries) GetRolePermissionsByPermissionID(ctx context.Context, permissionID uuid.UUID) ([]RolePermission, error) {
	rows, err := q.db.QueryContext(ctx, getRolePermissionsByPermissionID, permissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolePermission{}
	for rows.Next() {
		var i RolePermission
		if err := rows.Scan(&i.ID, &i.RoleID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolePermissionsByRoleID = `-- name: GetRolePermissionsByRoleID :many
SELECT id, role_id, permission_id
FROM "role_permissions"
WHERE role_id = $1
`

func (q *Queries) GetRolePermissionsByRoleID(ctx context.Context, roleID uuid.UUID) ([]RolePermission, error) {
	rows, err := q.db.QueryContext(ctx, getRolePermissionsByRoleID, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolePermission{}
	for rows.Next() {
		var i RolePermission
		if err := rows.Scan(&i.ID, &i.RoleID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleWithPermissions = `-- name: GetRoleWithPermissions :one
WITH role_perms AS (
  SELECT role.id AS role_id, role.name AS role_name, role.code AS role_code,
         permissions.id AS permission_id, permissions.name AS permission_name, permissions.code AS permission_code
  FROM role
  JOIN role_permissions ON role.id = role_permissions.role_id
  JOIN permissions ON role_permissions.permission_id = permissions.id
  WHERE role.id = $1
)
SELECT role_id, role_name, role_code,
       json_agg(json_build_object('id', permission_id, 'name', permission_name, 'code', permission_code)) AS permissions
FROM role_perms
GROUP BY role_id, role_name, role_code
`

type GetRoleWithPermissionsRow struct {
	RoleID      uuid.UUID       `json:"role_id"`
	RoleName    string          `json:"role_name"`
	RoleCode    string          `json:"role_code"`
	Permissions json.RawMessage `json:"permissions"`
}

func (q *Queries) GetRoleWithPermissions(ctx context.Context, id uuid.UUID) (GetRoleWithPermissionsRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleWithPermissions, id)
	var i GetRoleWithPermissionsRow
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.RoleCode,
		&i.Permissions,
	)
	return i, err
}

const listPermissions = `-- name: ListPermissions :many
SELECT id, name, code FROM "permissions"
`

func (q *Queries) ListPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, listPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name, &i.Code); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolePermissions = `-- name: ListRolePermissions :many
SELECT id, role_id, permission_id FROM "role_permissions"
`

func (q *Queries) ListRolePermissions(ctx context.Context) ([]RolePermission, error) {
	rows, err := q.db.QueryContext(ctx, listRolePermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolePermission{}
	for rows.Next() {
		var i RolePermission
		if err := rows.Scan(&i.ID, &i.RoleID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, code FROM "role"
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.Code); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const permissionExists = `-- name: PermissionExists :one
SELECT EXISTS(SELECT 1 FROM "permissions" WHERE id = $1)
`

func (q *Queries) PermissionExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, permissionExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const roleExistsByID = `-- name: RoleExistsByID :one
SELECT EXISTS(SELECT 1 FROM "role" WHERE id = $1)
`

func (q *Queries) RoleExistsByID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, roleExistsByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const roleExistsByName = `-- name: RoleExistsByName :one
SELECT EXISTS(SELECT 1 FROM "role" WHERE name = $1)
`

func (q *Queries) RoleExistsByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, roleExistsByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE "role"
SET
  name = $2,
  code = $3
WHERE id = $1
RETURNING id, name, code
`

type UpdateRoleParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	Code string    `json:"code"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.ID, arg.Name, arg.Code)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const updateRolePermission = `-- name: UpdateRolePermission :one
UPDATE "role_permissions"
SET
  role_id = $2,
  permission_id = $3
WHERE id = $1
RETURNING id, role_id, permission_id
`

type UpdateRolePermissionParams struct {
	ID           uuid.UUID `json:"id"`
	RoleID       uuid.UUID `json:"role_id"`
	PermissionID uuid.UUID `json:"permission_id"`
}

func (q *Queries) UpdateRolePermission(ctx context.Context, arg UpdateRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRowContext(ctx, updateRolePermission, arg.ID, arg.RoleID, arg.PermissionID)
	var i RolePermission
	err := row.Scan(&i.ID, &i.RoleID, &i.PermissionID)
	return i, err
}
