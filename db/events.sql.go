// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: events.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one

INSERT INTO "calendar_events" (
  user_id,
  case_id,
  event_date,
  notes
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_id, case_id, event_date, notes, task_id
`

type CreateEventParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	CaseID    uuid.UUID      `json:"case_id"`
	EventDate time.Time      `json:"event_date"`
	Notes     sql.NullString `json:"notes"`
}

// Calendar Events
func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (CalendarEvent, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.UserID,
		arg.CaseID,
		arg.EventDate,
		arg.Notes,
	)
	var i CalendarEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CaseID,
		&i.EventDate,
		&i.Notes,
		&i.TaskID,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM "calendar_events" WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const eventExists = `-- name: EventExists :one
SELECT EXISTS(SELECT 1 FROM "calendar_events" WHERE id = $1)
`

func (q *Queries) EventExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, eventExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getEvent = `-- name: GetEvent :one
SELECT id, user_id, case_id, event_date, notes, task_id FROM "calendar_events" WHERE id = $1
`

func (q *Queries) GetEvent(ctx context.Context, id uuid.UUID) (CalendarEvent, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i CalendarEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CaseID,
		&i.EventDate,
		&i.Notes,
		&i.TaskID,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, user_id, case_id, event_date, notes, task_id FROM "calendar_events"
`

func (q *Queries) ListEvents(ctx context.Context) ([]CalendarEvent, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CalendarEvent{}
	for rows.Next() {
		var i CalendarEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CaseID,
			&i.EventDate,
			&i.Notes,
			&i.TaskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE "calendar_events"
SET
  user_id = $2,
  case_id = $3,
  event_date = $4,
  notes = $5
WHERE id = $1
RETURNING id, user_id, case_id, event_date, notes, task_id
`

type UpdateEventParams struct {
	ID        uuid.UUID      `json:"id"`
	UserID    uuid.UUID      `json:"user_id"`
	CaseID    uuid.UUID      `json:"case_id"`
	EventDate time.Time      `json:"event_date"`
	Notes     sql.NullString `json:"notes"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (CalendarEvent, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.ID,
		arg.UserID,
		arg.CaseID,
		arg.EventDate,
		arg.Notes,
	)
	var i CalendarEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CaseID,
		&i.EventDate,
		&i.Notes,
		&i.TaskID,
	)
	return i, err
}
