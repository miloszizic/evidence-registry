// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: case.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const caseExists = `-- name: CaseExists :one
SELECT EXISTS(SELECT 1 FROM "cases" WHERE name = $1)
`

func (q *Queries) CaseExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, caseExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const caseTypeExists = `-- name: CaseTypeExists :one
SELECT EXISTS(SELECT 1 FROM "case_types" WHERE name = $1)
`

func (q *Queries) CaseTypeExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, caseTypeExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const caseTypeExistsByID = `-- name: CaseTypeExistsByID :one
SELECT EXISTS(SELECT 1 FROM "case_types" WHERE id = $1)
`

func (q *Queries) CaseTypeExistsByID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, caseTypeExistsByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCase = `-- name: CreateCase :one
INSERT INTO "cases" (
  name,
  tags,
  case_year,
  case_type_id,
  case_number,
  case_court_id
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, created_at, updated_at, name, tags, case_year, case_type_id, case_number, case_court_id
`

type CreateCaseParams struct {
	Name        string    `json:"name"`
	Tags        []string  `json:"tags"`
	CaseYear    int32     `json:"case_year"`
	CaseTypeID  uuid.UUID `json:"case_type_id"`
	CaseNumber  int32     `json:"case_number"`
	CaseCourtID uuid.UUID `json:"case_court_id"`
}

func (q *Queries) CreateCase(ctx context.Context, arg CreateCaseParams) (Case, error) {
	row := q.db.QueryRowContext(ctx, createCase,
		arg.Name,
		pq.Array(arg.Tags),
		arg.CaseYear,
		arg.CaseTypeID,
		arg.CaseNumber,
		arg.CaseCourtID,
	)
	var i Case
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		pq.Array(&i.Tags),
		&i.CaseYear,
		&i.CaseTypeID,
		&i.CaseNumber,
		&i.CaseCourtID,
	)
	return i, err
}

const createCaseType = `-- name: CreateCaseType :one
INSERT INTO "case_types" (
  name,
  description
) VALUES (
  $1, $2
) RETURNING id, name, description
`

type CreateCaseTypeParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateCaseType(ctx context.Context, arg CreateCaseTypeParams) (CaseType, error) {
	row := q.db.QueryRowContext(ctx, createCaseType, arg.Name, arg.Description)
	var i CaseType
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteCase = `-- name: DeleteCase :exec
DELETE FROM "cases" WHERE id = $1
`

func (q *Queries) DeleteCase(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCase, id)
	return err
}

const deleteCaseByName = `-- name: DeleteCaseByName :exec
DELETE FROM "cases" WHERE name = $1
`

func (q *Queries) DeleteCaseByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteCaseByName, name)
	return err
}

const deleteCaseType = `-- name: DeleteCaseType :exec
DELETE FROM "case_types" WHERE id = $1
`

func (q *Queries) DeleteCaseType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCaseType, id)
	return err
}

const getCase = `-- name: GetCase :one
SELECT id, created_at, updated_at, name, tags, case_year, case_type_id, case_number, case_court_id FROM "cases" WHERE id = $1
`

func (q *Queries) GetCase(ctx context.Context, id uuid.UUID) (Case, error) {
	row := q.db.QueryRowContext(ctx, getCase, id)
	var i Case
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		pq.Array(&i.Tags),
		&i.CaseYear,
		&i.CaseTypeID,
		&i.CaseNumber,
		&i.CaseCourtID,
	)
	return i, err
}

const getCaseByName = `-- name: GetCaseByName :one
SELECT id, created_at, updated_at, name, tags, case_year, case_type_id, case_number, case_court_id FROM "cases" WHERE name = $1
`

func (q *Queries) GetCaseByName(ctx context.Context, name string) (Case, error) {
	row := q.db.QueryRowContext(ctx, getCaseByName, name)
	var i Case
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		pq.Array(&i.Tags),
		&i.CaseYear,
		&i.CaseTypeID,
		&i.CaseNumber,
		&i.CaseCourtID,
	)
	return i, err
}

const getCaseIDTypes = `-- name: GetCaseIDTypes :many
SELECT id, name, description FROM "case_types"
`

func (q *Queries) GetCaseIDTypes(ctx context.Context) ([]CaseType, error) {
	rows, err := q.db.QueryContext(ctx, getCaseIDTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CaseType{}
	for rows.Next() {
		var i CaseType
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCaseType = `-- name: GetCaseType :one
SELECT id, name, description FROM "case_types" WHERE id = $1
`

func (q *Queries) GetCaseType(ctx context.Context, id uuid.UUID) (CaseType, error) {
	row := q.db.QueryRowContext(ctx, getCaseType, id)
	var i CaseType
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getCaseTypeIDByName = `-- name: GetCaseTypeIDByName :one
SELECT id FROM "case_types" WHERE name = $1
`

func (q *Queries) GetCaseTypeIDByName(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCaseTypeIDByName, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getCourtIDByCode = `-- name: GetCourtIDByCode :one
SELECT id FROM "courts" WHERE code = $1
`

func (q *Queries) GetCourtIDByCode(ctx context.Context, code int32) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCourtIDByCode, code)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getCourtIDByShortName = `-- name: GetCourtIDByShortName :one
SELECT id FROM "courts" WHERE short_name = $1
`

func (q *Queries) GetCourtIDByShortName(ctx context.Context, shortName string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCourtIDByShortName, shortName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getCourtShortName = `-- name: GetCourtShortName :one
SELECT id, code, name, short_name FROM "courts" WHERE id = $1
`

func (q *Queries) GetCourtShortName(ctx context.Context, id uuid.UUID) (Court, error) {
	row := q.db.QueryRowContext(ctx, getCourtShortName, id)
	var i Court
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.ShortName,
	)
	return i, err
}

const listCaseTypes = `-- name: ListCaseTypes :many
SELECT id, name, description FROM "case_types"
`

func (q *Queries) ListCaseTypes(ctx context.Context) ([]CaseType, error) {
	rows, err := q.db.QueryContext(ctx, listCaseTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CaseType{}
	for rows.Next() {
		var i CaseType
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCases = `-- name: ListCases :many
SELECT id, created_at, updated_at, name, tags, case_year, case_type_id, case_number, case_court_id FROM "cases"
`

func (q *Queries) ListCases(ctx context.Context) ([]Case, error) {
	rows, err := q.db.QueryContext(ctx, listCases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Case{}
	for rows.Next() {
		var i Case
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			pq.Array(&i.Tags),
			&i.CaseYear,
			&i.CaseTypeID,
			&i.CaseNumber,
			&i.CaseCourtID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCase = `-- name: UpdateCase :one
UPDATE "cases"
SET
  name = $2,
  tags = $3,
  case_year = $4,
  case_type_id = $5,
  case_number = $6,
  case_court_id = $7
WHERE id = $1
RETURNING id, created_at, updated_at, name, tags, case_year, case_type_id, case_number, case_court_id
`

type UpdateCaseParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Tags        []string  `json:"tags"`
	CaseYear    int32     `json:"case_year"`
	CaseTypeID  uuid.UUID `json:"case_type_id"`
	CaseNumber  int32     `json:"case_number"`
	CaseCourtID uuid.UUID `json:"case_court_id"`
}

func (q *Queries) UpdateCase(ctx context.Context, arg UpdateCaseParams) (Case, error) {
	row := q.db.QueryRowContext(ctx, updateCase,
		arg.ID,
		arg.Name,
		pq.Array(arg.Tags),
		arg.CaseYear,
		arg.CaseTypeID,
		arg.CaseNumber,
		arg.CaseCourtID,
	)
	var i Case
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		pq.Array(&i.Tags),
		&i.CaseYear,
		&i.CaseTypeID,
		&i.CaseNumber,
		&i.CaseCourtID,
	)
	return i, err
}

const updateCaseType = `-- name: UpdateCaseType :one
UPDATE "case_types"
SET
  name = $2,
  description = $3
WHERE id = $1
RETURNING id, name, description
`

type UpdateCaseTypeParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) UpdateCaseType(ctx context.Context, arg UpdateCaseTypeParams) (CaseType, error) {
	row := q.db.QueryRowContext(ctx, updateCaseType, arg.ID, arg.Name, arg.Description)
	var i CaseType
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
