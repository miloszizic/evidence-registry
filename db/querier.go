// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	AddMultiplePermissionsToRole(ctx context.Context, arg AddMultiplePermissionsToRoleParams) ([]RolePermission, error)
	AddRolePermission(ctx context.Context, arg AddRolePermissionParams) (RolePermission, error)
	AddRoleToUser(ctx context.Context, arg AddRoleToUserParams) (AppUser, error)
	AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error
	CaseExists(ctx context.Context, name string) (bool, error)
	CaseTypeExists(ctx context.Context, name string) (bool, error)
	CaseTypeExistsByID(ctx context.Context, id uuid.UUID) (bool, error)
	CreateCalendarEvent(ctx context.Context, arg CreateCalendarEventParams) (CalendarEvent, error)
	CreateCase(ctx context.Context, arg CreateCaseParams) (Case, error)
	CreateCaseType(ctx context.Context, arg CreateCaseTypeParams) (CaseType, error)
	CreateCourt(ctx context.Context, name string) (Court, error)
	// Calendar Events
	CreateEvent(ctx context.Context, arg CreateEventParams) (CalendarEvent, error)
	CreateEvidence(ctx context.Context, arg CreateEvidenceParams) (Evidence, error)
	CreatePermission(ctx context.Context, name string) (Permission, error)
	CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error)
	// Tasks
	CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error)
	CreateTaskReschedule(ctx context.Context, arg CreateTaskRescheduleParams) (TaskReschedule, error)
	CreateTaskType(ctx context.Context, name string) (TaskType, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (AppUser, error)
	CreateUserCase(ctx context.Context, arg CreateUserCaseParams) (UserCase, error)
	CreateUserTask(ctx context.Context, arg CreateUserTaskParams) (UserTask, error)
	DeleteCase(ctx context.Context, id uuid.UUID) error
	DeleteCaseByName(ctx context.Context, name string) error
	DeleteCaseType(ctx context.Context, id uuid.UUID) error
	DeleteCourt(ctx context.Context, id uuid.UUID) error
	DeleteEvent(ctx context.Context, id uuid.UUID) error
	DeleteEvidence(ctx context.Context, id uuid.UUID) error
	DeleteRole(ctx context.Context, id uuid.UUID) error
	DeleteRolePermission(ctx context.Context, arg DeleteRolePermissionParams) error
	DeleteTaskReschedule(ctx context.Context, id uuid.UUID) error
	DeleteUser(ctx context.Context, id uuid.UUID) error
	DeleteUserTask(ctx context.Context, id uuid.UUID) error
	EventExists(ctx context.Context, id uuid.UUID) (bool, error)
	EvidenceExists(ctx context.Context, arg EvidenceExistsParams) (bool, error)
	GetCalendarEvent(ctx context.Context, id uuid.UUID) (CalendarEvent, error)
	GetCalendarEventsByUserId(ctx context.Context, userID uuid.UUID) ([]CalendarEvent, error)
	GetCase(ctx context.Context, id uuid.UUID) (Case, error)
	GetCaseByName(ctx context.Context, name string) (Case, error)
	GetCaseIDTypes(ctx context.Context) ([]CaseType, error)
	GetCaseType(ctx context.Context, id uuid.UUID) (CaseType, error)
	GetCaseTypeIDByName(ctx context.Context, name string) (uuid.UUID, error)
	GetCourt(ctx context.Context, id uuid.UUID) (Court, error)
	GetCourtIDByCode(ctx context.Context, code int32) (uuid.UUID, error)
	GetCourtIDByShortName(ctx context.Context, shortName string) (uuid.UUID, error)
	GetCourtShortName(ctx context.Context, id uuid.UUID) (Court, error)
	GetEvent(ctx context.Context, id uuid.UUID) (CalendarEvent, error)
	GetEvidence(ctx context.Context, id uuid.UUID) (Evidence, error)
	GetEvidenceIDByType(ctx context.Context, name string) (uuid.UUID, error)
	GetEvidencesByCaseID(ctx context.Context, caseID uuid.UUID) ([]Evidence, error)
	GetPermissionIDByName(ctx context.Context, name string) (uuid.UUID, error)
	GetPermissionsForRole(ctx context.Context, roleID uuid.UUID) ([]string, error)
	GetRoleByID(ctx context.Context, id uuid.UUID) (Role, error)
	GetRoleByName(ctx context.Context, name string) (Role, error)
	GetRoleID(ctx context.Context, name string) (uuid.UUID, error)
	GetRolePermissions(ctx context.Context, roleID uuid.UUID) ([]string, error)
	GetRolePermissionsByPermissionID(ctx context.Context, permissionID uuid.UUID) ([]RolePermission, error)
	GetRolePermissionsByRoleID(ctx context.Context, roleID uuid.UUID) ([]RolePermission, error)
	GetRoleWithPermissions(ctx context.Context, id uuid.UUID) (GetRoleWithPermissionsRow, error)
	GetSession(ctx context.Context, refreshPayloadID uuid.UUID) (Session, error)
	GetTask(ctx context.Context, id uuid.UUID) (Task, error)
	GetTaskReschedule(ctx context.Context, id uuid.UUID) (TaskReschedule, error)
	GetTaskType(ctx context.Context, id uuid.UUID) (TaskType, error)
	GetUser(ctx context.Context, id uuid.UUID) (AppUser, error)
	GetUserByEmail(ctx context.Context, email string) (AppUser, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (AppUser, error)
	GetUserByUsername(ctx context.Context, username string) (AppUser, error)
	GetUserCaseID(ctx context.Context, caseID uuid.UUID) (uuid.UUID, error)
	GetUserTask(ctx context.Context, id uuid.UUID) (UserTask, error)
	GetUserTasksByUserId(ctx context.Context, userID uuid.UUID) ([]UserTask, error)
	GetUserWithRole(ctx context.Context, username string) (GetUserWithRoleRow, error)
	GetUsers(ctx context.Context) ([]AppUser, error)
	GetUsersWithRoles(ctx context.Context) ([]GetUsersWithRolesRow, error)
	InvalidateSession(ctx context.Context, id uuid.UUID) error
	ListCalendarEvents(ctx context.Context) ([]CalendarEvent, error)
	ListCaseTypes(ctx context.Context) ([]CaseType, error)
	ListCases(ctx context.Context) ([]Case, error)
	ListCourts(ctx context.Context) ([]Court, error)
	ListEvents(ctx context.Context) ([]CalendarEvent, error)
	ListEvidence(ctx context.Context) ([]Evidence, error)
	ListEvidenceTypes(ctx context.Context) ([]EvidenceType, error)
	ListPermissions(ctx context.Context) ([]Permission, error)
	ListRolePermissions(ctx context.Context) ([]RolePermission, error)
	ListRoles(ctx context.Context) ([]Role, error)
	ListTaskReschedules(ctx context.Context) ([]TaskReschedule, error)
	ListTaskTypes(ctx context.Context) ([]TaskType, error)
	ListTasks(ctx context.Context) ([]Task, error)
	ListUserTasks(ctx context.Context) ([]UserTask, error)
	ListUsers(ctx context.Context) ([]AppUser, error)
	PermissionExists(ctx context.Context, id uuid.UUID) (bool, error)
	RoleExistsByID(ctx context.Context, id uuid.UUID) (bool, error)
	RoleExistsByName(ctx context.Context, name string) (bool, error)
	// Sets the current user in the session_data table.
	SetCurrentUser(ctx context.Context, value uuid.UUID) error
	TaskRescheduleExists(ctx context.Context, id uuid.UUID) (bool, error)
	UpdateCase(ctx context.Context, arg UpdateCaseParams) (Case, error)
	UpdateCaseType(ctx context.Context, arg UpdateCaseTypeParams) (CaseType, error)
	UpdateCourt(ctx context.Context, arg UpdateCourtParams) (Court, error)
	UpdateEvent(ctx context.Context, arg UpdateEventParams) (CalendarEvent, error)
	UpdateEvidenceDescription(ctx context.Context, arg UpdateEvidenceDescriptionParams) error
	UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error)
	UpdateRolePermission(ctx context.Context, arg UpdateRolePermissionParams) (RolePermission, error)
	UpdateTaskReschedule(ctx context.Context, arg UpdateTaskRescheduleParams) (TaskReschedule, error)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (AppUser, error)
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (AppUser, error)
	UpdateUserTask(ctx context.Context, arg UpdateUserTaskParams) (UserTask, error)
	UserExists(ctx context.Context, username string) (bool, error)
	UserExistsByID(ctx context.Context, id uuid.UUID) (bool, error)
	UserTaskExists(ctx context.Context, id uuid.UUID) (bool, error)
}

var _ Querier = (*Queries)(nil)
