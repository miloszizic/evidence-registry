// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: evidence.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEvidence = `-- name: CreateEvidence :one
INSERT INTO "evidence" (
  case_id,
  app_user_id,
  name,
  description,
  hash,
  evidence_type_id
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, case_id, created_at, updated_at, app_user_id, name, description, hash, evidence_type_id
`

type CreateEvidenceParams struct {
	CaseID         uuid.UUID      `json:"case_id"`
	AppUserID      uuid.UUID      `json:"app_user_id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	Hash           string         `json:"hash"`
	EvidenceTypeID uuid.UUID      `json:"evidence_type_id"`
}

func (q *Queries) CreateEvidence(ctx context.Context, arg CreateEvidenceParams) (Evidence, error) {
	row := q.db.QueryRowContext(ctx, createEvidence,
		arg.CaseID,
		arg.AppUserID,
		arg.Name,
		arg.Description,
		arg.Hash,
		arg.EvidenceTypeID,
	)
	var i Evidence
	err := row.Scan(
		&i.ID,
		&i.CaseID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppUserID,
		&i.Name,
		&i.Description,
		&i.Hash,
		&i.EvidenceTypeID,
	)
	return i, err
}

const deleteEvidence = `-- name: DeleteEvidence :exec
DELETE FROM "evidence" WHERE id = $1
`

func (q *Queries) DeleteEvidence(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEvidence, id)
	return err
}

const evidenceExists = `-- name: EvidenceExists :one
SELECT EXISTS (SELECT 1 FROM "evidence" WHERE name = $1 AND case_id = $2)
`

type EvidenceExistsParams struct {
	Name   string    `json:"name"`
	CaseID uuid.UUID `json:"case_id"`
}

func (q *Queries) EvidenceExists(ctx context.Context, arg EvidenceExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, evidenceExists, arg.Name, arg.CaseID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getEvidence = `-- name: GetEvidence :one
SELECT id, case_id, created_at, updated_at, app_user_id, name, description, hash, evidence_type_id FROM "evidence" WHERE id = $1
`

func (q *Queries) GetEvidence(ctx context.Context, id uuid.UUID) (Evidence, error) {
	row := q.db.QueryRowContext(ctx, getEvidence, id)
	var i Evidence
	err := row.Scan(
		&i.ID,
		&i.CaseID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppUserID,
		&i.Name,
		&i.Description,
		&i.Hash,
		&i.EvidenceTypeID,
	)
	return i, err
}

const getEvidenceIDByType = `-- name: GetEvidenceIDByType :one
SELECT id FROM "evidence_types" WHERE name = $1
`

func (q *Queries) GetEvidenceIDByType(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getEvidenceIDByType, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getEvidencesByCaseID = `-- name: GetEvidencesByCaseID :many
SELECT id, case_id, created_at, updated_at, app_user_id, name, description, hash, evidence_type_id FROM "evidence" WHERE case_id = $1
`

func (q *Queries) GetEvidencesByCaseID(ctx context.Context, caseID uuid.UUID) ([]Evidence, error) {
	rows, err := q.db.QueryContext(ctx, getEvidencesByCaseID, caseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Evidence{}
	for rows.Next() {
		var i Evidence
		if err := rows.Scan(
			&i.ID,
			&i.CaseID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AppUserID,
			&i.Name,
			&i.Description,
			&i.Hash,
			&i.EvidenceTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvidence = `-- name: ListEvidence :many
SELECT id, case_id, created_at, updated_at, app_user_id, name, description, hash, evidence_type_id FROM "evidence"
`

func (q *Queries) ListEvidence(ctx context.Context) ([]Evidence, error) {
	rows, err := q.db.QueryContext(ctx, listEvidence)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Evidence{}
	for rows.Next() {
		var i Evidence
		if err := rows.Scan(
			&i.ID,
			&i.CaseID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AppUserID,
			&i.Name,
			&i.Description,
			&i.Hash,
			&i.EvidenceTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvidenceTypes = `-- name: ListEvidenceTypes :many
SELECT id, name FROM "evidence_types"
`

func (q *Queries) ListEvidenceTypes(ctx context.Context) ([]EvidenceType, error) {
	rows, err := q.db.QueryContext(ctx, listEvidenceTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EvidenceType{}
	for rows.Next() {
		var i EvidenceType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvidenceDescription = `-- name: UpdateEvidenceDescription :exec
UPDATE "evidence" SET description = $1 WHERE id = $2
`

type UpdateEvidenceDescriptionParams struct {
	Description sql.NullString `json:"description"`
	ID          uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateEvidenceDescription(ctx context.Context, arg UpdateEvidenceDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateEvidenceDescription, arg.Description, arg.ID)
	return err
}
